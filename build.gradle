plugins {
    id 'de.aaschmid.cpd' version '1.0'
    id "org.sonarqube" version "2.1"
    id "com.jfrog.bintray" version "1.7.1"
}

apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'jdepend'
apply plugin: 'jacoco'
apply plugin: 'org.sonarqube'
apply plugin: 'maven'
apply plugin: 'signing'

group = 'net.robyf'
archivesBaseName = 'dbpatcher'

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext.majorVersion = 1
ext.minorVersion = 0

def computeVersionNumber() {
    def computedVersion
    ext.env = System.getenv()
    ext.branchName = env.BRANCH_NAME
    if (ext.branchName == "master") {
        ext.buildNumber = env.BUILD_NUMBER?.toInteger()
        computedVersion = "${majorVersion}.${minorVersion}.${buildNumber}"
    } else {
        computedVersion = "${majorVersion}.${minorVersion}-SNAPSHOT"
    }
    return computedVersion
}

version = computeVersionNumber()
ext.isSnapshot = version.endsWith("SNAPSHOT")

if ( isSnapshot ) {
    println "Using snapshot repository for artifact uploads"
    ext.mavenCentralUploadUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
    ext.sonarProjectVersion = version + "-b" + env.BUILD_NUMBER
} else {
    println "Using staging repository for artifact uploads"
    ext.mavenCentralUploadUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
    ext.sonarProjectVersion = version
}

wrapper {
    gradleVersion = '3.1'
}

repositories {
    jcenter()
}

configurations {
/*
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
*/
    executableJar
    archives
}

dependencies {
    compile group: 'commons-cli', name: 'commons-cli', version: '1.2'
    compile group: 'org.apache.commons', name: 'commons-exec', version: '[1.2,)'
    compile group: 'org.apache.ant', name: 'ant', version: '1.7.0'
    
    runtime group: 'mysql', name: 'mysql-connector-java', version: '5.1.39'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.easymock', name: 'easymock', version: '3.4'
    
    executableJar group: 'net.robyf', name: 'gradle-jarinjar-plugin', version: '1.0.6'
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'src'
        }
    }
    test {
        java {
            srcDirs 'unit_test_src', 'test_src'
        }
        resources {
            srcDirs 'unit_test_src', 'config'
        }
    }
/*    
    integrationTest {
        java {
            srcDir 'test_src'
        }
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
*/
}

compileJava {
    options.encoding = 'ISO8859-1'
}

compileTestJava {
    options.encoding = 'ISO8859-1'
}
/*
compileIntegrationTestJava {
    options.encoding = 'ISO8859-1'
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}
*/
checkstyleMain {
    configFile = new File(rootDir, "config/rob_checks.xml")
}

checkstyleTest {
    configFile = new File(rootDir, "config/rob_test_checks.xml")
}

jar {
    dependsOn check
}

test.finalizedBy(project.tasks.jacocoTestReport)

cpdCheck {
    source = sourceSets.main.java
    minimumTokenCount = 25
    ignoreFailures = true
}

task cpdHtml << {
    ant.xslt(in: "build/reports/cpd/cpdCheck.xml", style: "config/cpdhtml.xslt", out: "build/reports/cpd/cpd.html")
}

cpdCheck.finalizedBy(project.tasks.cpdHtml)

task jdependHtml << {
    ant.xslt(in: "build/reports/jdepend/main.xml", style: "config/jdepend.xsl", out: "build/reports/jdepend/jdepend.html")
}

jdependMain.finalizedBy(project.tasks.jdependHtml)

task sourceJar(type: Jar) {
    description = "An archive of the source code for Maven Central"
    classifier = 'sources'
    from sourceSets.main.allSource
    from "config/COPYING.txt"
}

task javadocJar(type: Jar) {
    description = "An archive of the JavaDocs for Maven Central"
    classifier = 'javadoc'
    from javadoc
}

task standaloneJar(type: Jar) {
    description = "Self-contained executable jar"
    classifier = 'standalone'
    
    from sourceSets.main.output
    from project.configurations.runtime.findAll { !it.getName().startsWith("ant") }
    
    def jarinjarFile = project.configurations.executableJar.find { it.getName().startsWith("gradle-jarinjar") }
    from zipTree(jarinjarFile.getAbsolutePath()).matching {
        include 'org/**'
    }

    manifest {
        attributes 'Main-Class': 'org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader'
        attributes 'Class-Path': '.'
        attributes 'Rsrc-Class-Path': './ ' + project.configurations.runtime.findAll { !it.getName().startsWith("ant") }.collect { it.getName() }.join(' ')
        attributes 'Rsrc-Main-Class': 'net.robyf.dbpatcher.Launcher'
    }
}

artifacts {
    archives jar, javadocJar, sourceJar, standaloneJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    if (gradle.startParameter.taskNames.contains("uploadArchives")) {
        repositories {
            mavenDeployer {
                if (signing.signatory) {
                    beforeDeployment {
                        signing.signPom(it)
                    }
                }
                configuration = configurations.archives
                repository(url: mavenCentralUploadUrl) {
                    authentication(userName: mavenUsername, password: mavenPassword)
                    releases(updatePolicy: "always")
                    snapshots(updatePolicy: "always")
                }
                pom.project(pomConfiguration)
            }
        }
    }
}

def getPomConfiguration() {
    return {
        name 'dbpatcher'
        packaging 'jar'
        description 'A tool for applying incremental updates to a MySQL or MariaDB database.'
        url 'https://github.com/robyf/dbpatcher'
        licenses {
            license {
                name 'GNU General Public License, Version 2.0'
                url 'https://www.gnu.org/licenses/old-licenses/gpl-2.0.txt'
                distribution 'repo'
            }
        }
        developers {
            developer {
                id 'robyf'
                name 'Roberto Fasciolo'
                email 'rob@robyf.net'
            }
        }
        scm {
            connection 'scm:https://robyf@github.com/robyf/dbpatcher'
            developerConnection 'scm:git@github.com:robyf/dbpatcher.git'
            url 'https://github.com/robyf/dbpatcher'
        }
    }
}

bintray {
    user = bintrayUsername
    key = bintrayApiKey

    configurations = [ 'archives' ]

    pkg {
        repo = 'maven-repo'
        name = 'gradle-jarinjar-plugin'
        desc = 'A tool for applying incremental updates to a MySQL or MariaDB database.'
        licenses = [ 'GPL-2.0' ]
        websiteUrl = 'https://github.com/robyf/dbpatcher'
        issueTrackerUrl = 'https://github.com/robyf/dbpatcher'
        vcsUrl = 'https://github.com/robyf/dbpatcher.git'
        labels = [ 'dbpatcher', 'mysql', 'mariadb' ]
        publicDownloadNumbers = true
        version {
            name = version
            // vcsTag = version
        }
    }
}

sonarqube {
    properties {
        property "sonar.version", project.ext.sonarProjectVersion
    }
}