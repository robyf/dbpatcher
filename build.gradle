plugins {
    id 'de.aaschmid.cpd' version '1.0'
    id "com.bmuschko.java2html" version "2.0"
    id "org.sonarqube" version "2.1-rc3"
}

apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'jdepend'
apply plugin: 'jacoco'
apply plugin: 'org.sonarqube'

group = 'net.robyf'
archivesBaseName = 'dbpatcher'

ext.majorVersion = 1
ext.minorVersion = 0

def computeVersionNumber() {
    def computedVersion
    ext.env = System.getenv()
    ext.branchName = env.BRANCH_NAME
    if (ext.branchName == "master") {
        ext.buildNumber = env.BUILD_NUMBER?.toInteger()
        computedVersion = "${majorVersion}.${minorVersion}.${buildNumber}"
    } else {
        computedVersion = "${majorVersion}.${minorVersion}-SNAPSHOT"
    }
    return computedVersion
}

version = computeVersionNumber()
ext.isSnapshot = version.endsWith("SNAPSHOT")

wrapper {
    gradleVersion = '3.1'
}

repositories {
    jcenter()
}

configurations {
/*
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
*/
    javancss
}

dependencies {
    compile group: 'commons-cli', name: 'commons-cli', version: '1.2'
    compile group: 'org.apache.ant', name: 'ant', version: '1.7.0'

    testCompile group: 'junit', name: 'junit', version: '4.8.2'
    testCompile group: 'easymock', name: 'easymock', version: '2.0'
    
    testRuntime group: 'mysql', name: 'mysql-connector-java', version: '5.1.29'
    testRuntime group: 'org.slf4j', name: 'slf4j-api', version: '1.7.13'

    javancss group: 'org.codehaus.javancss', name: 'javancss', version: '32.53'

    java2html group: 'de.java2html', name: 'java2html', version: '5.0'
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'src'
        }
    }
    test {
        java {
            srcDirs 'unit_test_src', 'test_src'
        }
        resources {
            srcDirs 'unit_test_src', 'config'
        }
    }
/*    
    integrationTest {
        java {
            srcDir 'test_src'
        }
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
*/
}

compileJava {
    options.encoding = 'ISO8859-1'
}

compileTestJava {
    options.encoding = 'ISO8859-1'
}
/*
compileIntegrationTestJava {
    options.encoding = 'ISO8859-1'
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}
*/
checkstyleMain {
    configFile = new File(rootDir, "config/rob_checks.xml")
}

checkstyleTest {
    configFile = new File(rootDir, "config/rob_test_checks.xml")
}

jar {
    dependsOn check
}

test.finalizedBy(project.tasks.jacocoTestReport)

cpdCheck {
    source = sourceSets.main.java
    minimumTokenCount = 25
    ignoreFailures = true
}

task cpdHtml << {
    ant.xslt(in: "build/reports/cpd/cpdCheck.xml", style: "config/cpdhtml.xslt", out: "build/reports/cpd/cpd.html")
}

cpdCheck.finalizedBy(project.tasks.cpdHtml)

task jdependHtml << {
    ant.xslt(in: "build/reports/jdepend/main.xml", style: "config/jdepend.xsl", out: "build/reports/jdepend/jdepend.html")
}

jdependMain.finalizedBy(project.tasks.jdependHtml)

task javancss << {
    mkdir reportsDir
    new File(reportsDir, "javancss").mkdirs()
    
    ant {
        taskdef name: 'javancss', classname: 'javancss.JavancssAntTask', classpath: configurations.javancss.asPath
        javancss srcDir: 'src', generateReport: true, outputFile: new File(reportsDir, "javancss/javancss_metrics.xml"), format: 'xml', includes: '**/*.java' 
        xslt in: new File(reportsDir, "javancss/javancss_metrics.xml"), style: "config/javancss2html.xsl", out: new File(reportsDir, "javancss/javancss.html")
    }
}

java2html {
    conversion {
        srcDirs = files("src")
        outputFormat = 'html'
        tabs = 4
    }
}

check {
    dependsOn javancss
}