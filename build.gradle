plugins {
    id 'de.aaschmid.cpd' version '1.0'
    id "org.sonarqube" version "2.1"
}

apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'jdepend'
apply plugin: 'jacoco'
apply plugin: 'org.sonarqube'

group = 'net.robyf'
archivesBaseName = 'dbpatcher'

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext.majorVersion = 1
ext.minorVersion = 0

def computeVersionNumber() {
    def computedVersion
    ext.env = System.getenv()
    ext.branchName = env.BRANCH_NAME
    if (ext.branchName == "master") {
        ext.buildNumber = env.BUILD_NUMBER?.toInteger()
        computedVersion = "${majorVersion}.${minorVersion}.${buildNumber}"
    } else {
        computedVersion = "${majorVersion}.${minorVersion}-SNAPSHOT"
    }
    return computedVersion
}

version = computeVersionNumber()
ext.isSnapshot = version.endsWith("SNAPSHOT")

wrapper {
    gradleVersion = '3.1'
}

repositories {
    jcenter()
}

configurations {
/*
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
*/
    executableJar
}

dependencies {
    compile group: 'commons-cli', name: 'commons-cli', version: '1.2'
    compile group: 'org.apache.commons', name: 'commons-exec', version: '[1.2,)'
    compile group: 'org.apache.ant', name: 'ant', version: '1.7.0'
    
    runtime group: 'mysql', name: 'mysql-connector-java', version: '5.1.39'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.easymock', name: 'easymock', version: '3.4'
    
    executableJar group: 'net.robyf', name: 'gradle-jarinjar-plugin', version: '1.0.6'
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'src'
        }
    }
    test {
        java {
            srcDirs 'unit_test_src', 'test_src'
        }
        resources {
            srcDirs 'unit_test_src', 'config'
        }
    }
/*    
    integrationTest {
        java {
            srcDir 'test_src'
        }
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
*/
}

compileJava {
    options.encoding = 'ISO8859-1'
}

compileTestJava {
    options.encoding = 'ISO8859-1'
}
/*
compileIntegrationTestJava {
    options.encoding = 'ISO8859-1'
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}
*/
checkstyleMain {
    configFile = new File(rootDir, "config/rob_checks.xml")
}

checkstyleTest {
    configFile = new File(rootDir, "config/rob_test_checks.xml")
}

jar {
    dependsOn check
}

test.finalizedBy(project.tasks.jacocoTestReport)

cpdCheck {
    source = sourceSets.main.java
    minimumTokenCount = 25
    ignoreFailures = true
}

task cpdHtml << {
    ant.xslt(in: "build/reports/cpd/cpdCheck.xml", style: "config/cpdhtml.xslt", out: "build/reports/cpd/cpd.html")
}

cpdCheck.finalizedBy(project.tasks.cpdHtml)

task jdependHtml << {
    ant.xslt(in: "build/reports/jdepend/main.xml", style: "config/jdepend.xsl", out: "build/reports/jdepend/jdepend.html")
}

jdependMain.finalizedBy(project.tasks.jdependHtml)

task sourceJar(type: Jar) {
    description = "An archive of the source code for Maven Central"
    classifier = 'sources'
    from sourceSets.main.allSource
    from "config/COPYING.txt"
}

task javadocJar(type: Jar) {
    description = "An archive of the JavaDocs for Maven Central"
    classifier = 'javadoc'
    from javadoc
}

task standaloneJar(type: Jar) {
    description = "Self-contained executable jar"
    classifier = 'standalone'
    
    from sourceSets.main.output
    from project.configurations.runtime.findAll { !it.getName().startsWith("ant") }
    
    def jarinjarFile = project.configurations.executableJar.find { it.getName().startsWith("gradle-jarinjar") }
    from zipTree(jarinjarFile.getAbsolutePath()).matching {
        include 'org/**'
    }

    manifest {
        attributes 'Main-Class': 'org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader'
        attributes 'Class-Path': '.'
        attributes 'Rsrc-Class-Path': './ ' + project.configurations.runtime.findAll { !it.getName().startsWith("ant") }.collect { it.getName() }.join(' ')
        attributes 'Rsrc-Main-Class': 'net.robyf.dbpatcher.Launcher'
    }
}

artifacts {
    archives jar, javadocJar, sourceJar, standaloneJar
}
