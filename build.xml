<project name="Database patcher" default="publish">

    <!-- Load build.properties -->

    <property file="build.properties" />

    <!-- Classpath -->

    <path id="classpath">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar" />
        </fileset>
        <pathelement location="${config.dir}" />
        <pathelement location="${class.dir}" />
        <pathelement location="${unit.test.class.dir}" />
        <pathelement location="${test.class.dir}" />
    </path>

	<!-- Preparation and clean-up tasks -->

    <target name="prepare">
        <mkdir dir="${class.dir}" />
        <mkdir dir="${test.class.dir}" />
        <mkdir dir="${build.dir}" />
        <mkdir dir="${production.dir}" />
        <mkdir dir="${production.classes.dir}" />
    	<mkdir dir="${site.dir}" />
        <mkdir dir="${log.dir}" />
    </target>

    <target name="clean" description="Deletes all generated files">
        <delete dir="${build.dir}" />
        <delete file="${basedir}/cobertura.ser" />
    	<delete dir="${log.dir}" />
    </target>
    	
    <!-- Java tasks -->

    <target name="compile" depends="prepare" description="Compiles source code">
        <javac srcdir="${source.dir}" 
               destdir="${class.dir}" 
               debug="on"
               encoding="iso8859-1"
               classpathref="classpath">
            <include name="**/*.java" />
        </javac>
    </target>

    <target name="compile-test" depends="compile" description="Compiles test source code">
        <javac srcdir="${unit.test.source.dir}" 
               destdir="${unit.test.class.dir}" 
               debug="on" 
               encoding="iso8859-1"
               classpathref="classpath">
            <include name="**/*.java" />
        </javac>
        <copy todir="${unit.test.class.dir}">
            <fileset dir="${unit.test.source.dir}" includes="**/*.sql" />
        </copy>
    	<javac srcdir="${test.source.dir}" 
               destdir="${test.class.dir}" 
               debug="on" 
               encoding="iso8859-1"
               classpathref="classpath">
            <include name="**/*.java" />
        </javac>
        <copy todir="${test.class.dir}">
            <fileset dir="${test.source.dir}" includes="**/*.log.*" />
        </copy>
    </target>
	
	<target name="jar" unless="test.fail" depends="compile">
        <tstamp>
            <format property="date" pattern="dd.MM.yyyy HH:mm" locale="fi" />
        </tstamp>
		<manifestclasspath property="jar.classpath" jarfile="${lib.dir}/ant.jar">
			<classpath>
				<pathelement location="${lib.dir}/." />
		        <fileset dir="${lib.dir}">
		            <include name="*.jar" />
		        	<exclude name="ant.jar" />
		        </fileset>
			</classpath>
		</manifestclasspath>
		<property name="jar.correctedclasspath" value=".${jar.classpath}" />
        <jar destfile="${jar.full.file}">
            <manifest>
                <attribute name="Implementation-Title" value="${application.name}" />
                <attribute name="Implementation-Version" value="${version} (${date})" />
                <attribute name="Implementation-Vendor" value="Roberto Fasciolo" />
                <attribute name="Class-Path" value="." />
            	<attribute name="Rsrc-Class-Path" value="${jar.correctedclasspath}" />
                <attribute name="Rsrc-Main-Class" value="net.robyf.dbpatcher.Launcher" />
                <attribute name="Main-Class" value="org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader" />
            </manifest>
        	
        	<zipfileset src="${config.dir}/jar-in-jar-loader.zip" />
            <fileset dir="${class.dir}">
                <include name="**/*" />
            </fileset>
        	<zipfileset dir="${config.dir}" prefix="net/robyf/dbpatcher" includes="dbpatcher.properties" />
            <fileset dir="${lib.dir}">
                <include name="*.jar" />
                <exclude name="ant.jar" />
            </fileset>
            <zipfileset dir="${config.dir}" prefix="META-INF" includes="COPYING.txt" />
		</jar>
        <jar destfile="${jar.file}">
            <manifest>
                <attribute name="Implementation-Title" value="${application.name}" />
                <attribute name="Implementation-Version" value="${version} (${date})" />
                <attribute name="Implementation-Vendor" value="Roberto Fasciolo" />
                <attribute name="Main-Class" value="net.robyf.dbpatcher.Launcher" />
            </manifest>
            
            <fileset dir="${class.dir}">
                <include name="**/*" />
            </fileset>
            <zipfileset dir="${config.dir}" prefix="net/robyf/dbpatcher" includes="dbpatcher.properties" />
            <zipfileset dir="${config.dir}" prefix="META-INF" includes="COPYING.txt" />
        </jar>
        <jar destfile="${jar.sources.file}">
            <manifest>
                <attribute name="Implementation-Title" value="${application.name}" />
                <attribute name="Implementation-Version" value="${version} (${date})" />
                <attribute name="Implementation-Vendor" value="Roberto Fasciolo" />
                <attribute name="Main-Class" value="net.robyf.dbpatcher.Launcher" />
            </manifest>
            
            <fileset dir="${source.dir}">
                <include name="**/*" />
            </fileset>
            <zipfileset dir="${config.dir}" prefix="net/robyf/dbpatcher" includes="dbpatcher.properties" />
            <zipfileset dir="${config.dir}" prefix="META-INF" includes="COPYING.txt" />
        </jar>
	</target>

    <!-- JUnit -->

    <target name="ensure-test-name" unless="test">
        <fail message="You must run this target with -Dtest=TestName" />
    </target>

    <target name="junit" 
            description="Runs the test you specify on the command line with -Dtest=" 
            depends="compile-test, instrument, ensure-test-name">

        <delete quiet="true">
            <fileset dir="${junit.data.dir}" includes="TEST*.xml" />
        </delete>
        <mkdir dir="${junit.data.dir}" />

        <junit printsummary="on" 
               fork="yes" 
               forkmode="once" 
               showoutput="no" 
               failureproperty="test.fail">

            <sysproperty key="net.sourceforge.cobertura.datafile" file="${basedir}/cobertura.ser" />

            <classpath>
                <path refid="classpath" />
            </classpath>

            <formatter type="xml" usefile="true" />

            <batchtest todir="${junit.data.dir}">
                <fileset dir="${unit.test.source.dir}">
                    <include name="**/${test}.java" />
                </fileset>
            	<fileset dir="${test.source.dir}">
                    <include name="**/${test}.java" />
                </fileset>
            </batchtest>

            <jvmarg value="-Dlog4j.configuration=file:${log4j.config.file}" />
            <!--jvmarg value="-XX:+UseParallelGC" /-->
            <!--jvmarg value="-XX:+PrintGC" /-->
            <jvmarg value="-Xmx256m" />

        </junit>

        <junitreport todir="${junit.data.dir}">
            <fileset dir="${junit.data.dir}">
                <include name="TEST-*.xml" />
            </fileset>
            <report format="frames" todir="${test.unit.report.dir}" />
        </junitreport>

    </target>

    <target name="set-test-property-for-all-tests">
        <property name="test" value="*/*Test" />
    </target>

    <target name="tests" 
            depends="set-test-property-for-all-tests,junit" 
            description="Runs all automated tests (unit- and otherwise)">
    </target>

    <target name="instrument" depends="compile">
        <taskdef classpathref="classpath" resource="tasks.properties" />
        <!-- Instrument -->
        <delete file="${basedir}/cobertura.ser" />
        
        <copy todir="${production.classes.dir}">
            <fileset dir="${class.dir}">
                <include name="**/*" />
            </fileset>
        </copy>

        <cobertura-instrument>
            <fileset dir="${class.dir}">
                <include name="**/*.class" />
            </fileset>
        </cobertura-instrument>    
    </target>

    <!-- For Cobertura (Test Coverage) -->

    <target name="cover-test" depends="tests">
        <taskdef classpathref="classpath" resource="tasks.properties" />
        <!-- Report -->
        <delete dir="${test.coverage.report.dir}" />
        <cobertura-report srcdir="${source.dir}" destdir="${test.coverage.report.dir}" format="xml" />
        <cobertura-report srcdir="${source.dir}" destdir="${test.coverage.report.dir}" format="html" />
    </target>


    <!-- Checkstyle -->

    <target name="checkstyle" depends="prepare">

        <mkdir dir="${test.checkstyle.report.dir}" />

        <taskdef classpathref="classpath" resource="checkstyletask.properties" />

        <checkstyle config="${config.dir}/rob_checks.xml" failureProperty="checkstyle.failure" failOnViolation="false" classpathref="classpath">
            <formatter type="xml" tofile="${test.checkstyle.report.dir}/checkstyle_report.xml" />
            <fileset dir="${source.dir}" includes="**/*.java" />
        </checkstyle>

        <xslt basedir="${test.checkstyle.report.dir}" in="${test.checkstyle.report.dir}/checkstyle_report.xml" out="${test.checkstyle.report.dir}/checkstyle_report.html" style="${config.dir}/checkstyle.xsl" />

    </target>


    <!-- CPD -->

    <target name="cpd" depends="prepare">
        <taskdef name="cpd" classpathref="classpath" classname="net.sourceforge.pmd.cpd.CPDTask" />

        <mkdir dir="${test.cpd.report.dir}" />

        <cpd minimumTokenCount="100" outputFile="${test.cpd.report.dir}/cpd.xml" format="xml">
            <fileset dir="${source.dir}" includes="**/*.java" />
        </cpd>

        <xslt in="${test.cpd.report.dir}/cpd.xml" style="${config.dir}/cpdhtml.xslt" out="${test.cpd.report.dir}/cpd.html" />

    </target>


    <!-- JDepend -->

    <target name="jdepend" depends="compile">

        <!-- java jdepend.xmlui.JDepend -file report.xml $JDEPEND_HOME/build -->

        <mkdir dir="${test.jdepend.report.dir}" />

        <java classname="jdepend.xmlui.JDepend">
            <arg value="-file" />
            <arg value="${test.jdepend.report.dir}/jdepend-report.xml" />
            <arg value="${class.dir}" />
            <classpath refid="classpath" />
        </java>

        <xslt in="${test.jdepend.report.dir}/jdepend-report.xml" style="${config.dir}/jdepend.xsl" out="${test.jdepend.report.dir}/jdepend.html" />

        <!-- This requires us to have the jdepend libraries under ant
        <jdepend outputfile="${docDir}/jdepend.txt"
                 fork="yes"
                 classpathref="classpath">
            <classespath location="${build}" />
            <classpath location="lib/jdepend-2.9.jar"/>
        </jdepend>
        -->

    </target>


    <!-- JavaNCSS -->

    <target name="complexity" depends="prepare">
        <taskdef name="javancss" classname="javancss.JavancssAntTask" classpathref="classpath" />

        <mkdir dir="${test.javancss.report.dir}" />

        <javancss srcdir="${source.dir}" generateReport="true" outputfile="${test.javancss.report.dir}/javancss_metrics.xml" format="xml" includes="**/*.java" />

        <xslt in="${test.javancss.report.dir}/javancss_metrics.xml" style="${config.dir}/javancss2html.xsl" out="${test.javancss.report.dir}/javancss.html" />
    </target>

	
	<!-- Javadoc -->
	
    <target name="javadoc">
        <tstamp>
            <format property="TODAY_IT" pattern="dd MMMM yyyy" locale="en.US" />
        </tstamp>
        <mkdir dir="${javadoc.dir}" />
        <javadoc destdir="${javadoc.dir}"
                 author="true"
                 use="true"
                 classpathref="classpath"
                 source="1.7"
                 doctitle="${application.name} - version ${version}"
                 windowtitle="${application.name} - version ${version}"
                 header="&lt;b&gt;${application.name}&lt;/b&gt;&lt;br /&gt;version ${version}"
                 footer="&lt;b&gt;${application.name}&lt;/b&gt;&lt;br /&gt;version ${version}">
            <fileset dir="${source.dir}" defaultexcludes="yes">
                <include name="**/*.java" />
            </fileset>
            <bottom><![CDATA[<i>Created on ${TODAY_IT}</i>]]></bottom>
        </javadoc>
    </target>
	
	
	<!-- Java 2 html -->
    
    <taskdef name="java2html" classname="com.java2html.Java2HTMLTask" classpathref="classpath" />
    
    <target name="java2html">
        <java2html title="${application.name} - version ${version}" simple="no" tabsize="4" marginsize="3" header="true" footer="true" destination="${sources.report.dir}">
            <fileset dir="${source.dir}" defaultexcludes="yes">
                <include name="**/*.java" />
            </fileset>
            <javadoc localRef="${javadoc.dir}" httpRef="http://www.robyf.net/software/dbpatcher/javadoc"/>
        </java2html>
    </target>
	

    <!-- All reporting in one -->

    <target name="reports"
            depends="clean,cover-test,checkstyle,cpd,jdepend,complexity,javadoc,java2html"
            description="Generates all reports" />

    <target name="dist" depends="clean,compile,jar,reports" />

    <target name="fail-if-tests-failed" if="test.fail">
        <fail message="Some tests failed" />
    </target>
	
	<target name="site">
		<taskdef name="vsitegen" classname="net.robyf.vsitegen.ant.VSiteGenTask" classpathref="classpath" />
		<vsitegen project="dbpatcher" navigation="${config.site.dir}/navigation.xml" content="${config.site.dir}" template="robyf.vtl" output="${site.dir}" />
	</target>
    
    <target name="ftppublish">
    	<ftp verbose="yes" passive="yes" password="${ftp.password}" server="${ftp.server}" userid="${ftp.username}" remotedir="${ftp.javadoc.dir}">
            <fileset dir="${javadoc.dir}" />
        </ftp>
        <ftp verbose="yes" passive="yes" password="${ftp.password}" server="${ftp.server}" userid="${ftp.username}" remotedir="${ftp.j2h.dir}">
            <fileset dir="${sources.report.dir}" />
        </ftp>
    	<ftp verbose="yes" passive="yes" password="${ftp.password}" server="${ftp.server}" userid="${ftp.username}" remotedir="${ftp.junit.dir}">
            <fileset dir="${test.unit.report.dir}" />
        </ftp>
        <ftp verbose="yes" passive="yes" password="${ftp.password}" server="${ftp.server}" userid="${ftp.username}" remotedir="${ftp.cobertura.dir}">
            <fileset dir="${test.coverage.report.dir}" />
        </ftp>
        <ftp verbose="yes" passive="yes" password="${ftp.password}" server="${ftp.server}" userid="${ftp.username}" remotedir="${ftp.basedir}">
            <fileset file="${test.checkstyle.report.dir}/checkstyle_report.html" />
            <fileset file="${test.cpd.report.dir}/cpd.html" />
        	<fileset file="${test.javancss.report.dir}/javancss.html" />
            <fileset file="${test.jdepend.report.dir}/jdepend.html" />
<!--
            <fileset file="${zip.bin.file}" />
            <fileset file="${zip.src.file}" />
-->
            <fileset dir="${site.dir}" />
        	<fileset file="${jar.file}" />
        	<fileset file="${jar.full.file}" />
        	<fileset file="${jar.sources.file}" />
        </ftp>
    </target>

    <target name="publish" 
            depends="clean,compile,dist,fail-if-tests-failed,site,ftppublish" />

</project>
